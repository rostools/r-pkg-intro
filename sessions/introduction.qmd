# Introduction to course {#sec-introduction}

{{< include ../includes/_wip.qmd >}}

> [**Introduction slides**](../slides/introduction.html)

<div>

```{=html}
<iframe class="slide-deck" src="../slides/introduction.html"></iframe>
```

</div>

::: {.callout-note collapse="true"}
## Instructor note

The slides contain speaking notes that you can view by pressing 'S' on
the keyboard.
:::

objectives:

-   why it can be very powerful and useful to create even a simple one.

-   Identify when and why to create an R package.

## The Big Picture

<!-- TODO: Add text highlighting the bigger picture of why we teach this. -->

This book and the tools, skills, and knowledge being taught come out of
the growing awareness of and demand for [open
science](https://en.wikipedia.org/wiki/Open_science), [reproducible
research](https://en.wikipedia.org/wiki/Reproducibility), and [software
sustainability](https://software.ac.uk/resources/approaches-software-sustainability).
So what are these?

-   Open science is a movement to make scientific data, methods, and
    results publicly and freely accessible by publishing them with [open
    licenses](https://opendefinition.org/guide/). These licenses allow
    others to re-use and modify these outputs without worrying about
    copyright infringement, often only requiring attribution to the
    original source.
-   Reproducible research means ensuring that anyone with access to data
    and software can feasibly reproduce the same or similar results,
    both to check them and to build on them. It's important to note that
    science can be open but not reproducible and reproducible but not
    open.
-   Sustainable software is when software is developed in a way that
    makes it easier for other people to extend and/or maintain it,
    rather than to replace it. Sustainability isn't just about the
    software itself, it also depends on the skills and culture of its
    users. For instance, if a software package is being maintained by a
    couple of post-docs who are being paid a fraction of what they could
    earn in industry and have no realistic hope of promotion because
    their field doesn't value tool building, it doesn't matter whether
    the package is well tested and easy to install: sooner or later
    (probably sooner) it will become
    [abandonware](https://en.wikipedia.org/wiki/Abandonware).

This course presents software development that emphasizes openness,
reproducibility, and sustainability, because it supports both individual
researchers and the entire research community.

Diagram of workflow:

-   Develop higher level design of Input, Output, and functions to get
    the output.
-   Write out overall aim of package and its major functionalities in
    README.md
-   Create fake/find real data to use in examples and for building code.
-   Save it in data-raw/ and process, use_data_raw().
-   Run the data-raw script and save in data/ as .rda.
-   develop code in dev/ (Rmd/script), using load_all() to access the
    dataset.
-   convert to function and test
-   Move to R/, run load_all(), and then test in dev/
-   Add roxygen doc and include @examples code that shows how the
    function is used
-   Create unit test with use_test()
-   run tests with ctrl-shift-t
-   Move the finished working code in `dev/` over into `vignettes/`...
    and write usage docs as you go along.
-   Build website.
-   Use Git and GitHub with automated actions.

## Why create an R package?

The main aim of developing software is to simplify some task or a set of
tasks for yourself and for others (such as your team if you have one).
This applies to software development in R as well. Creating an R package
is one of the more powerful ways of simplifying tasks, no matter how
simple or complex to begin with.

We will show throughout this book that creating and developing an R
package isn't as difficult as it might first sound. But before making a
package, there's a few things to think about. For instance, how do you
determine if you should make an R package? Ask these questions to
yourself. Have you ever made a function, no matter how simple? Have you
ever used that function more than once across more than one project or
file, either by copying and pasting it or by sourcing the file that
contains it? If you answered yes to these two questions, than you should
make an R package for that function. But you might wonder, why make a
package with only one function? Because it never stops with *just* one
function, you will very likely be making more in your work. Aside from
packaging up R functions, if you have small to medium sized datasets
that you use across multiple projects or files, you can even package up
the data too.

Aside from a "yes" to these questions, making an R package now is much
easier than it was in the past. That's largely thanks to R packages like
`{devtools}` and `{usethis}` that are designed to simplify developing R
packages. Combined with these packages, there are also so many free,
online books and resources for learning how to make R packages and doing
software development in R (see @sec-resources).

If we go back to the big picture in the preface in Section
@sec-big-picture, creating an R package, either posted on GitHub or
submitted to CRAN, that is connected to a specific scientific work
project or analysis will usually fulfill the reproducibility and open
science components of research. That's because making an R package
usually requires a higher level of rigor, testing, documentation, and
inspection of the code, meaning you and others can have more trust in
the results. And if its on GitHub, it's much easier to share your work
with others and have a bigger impact on research overall.

