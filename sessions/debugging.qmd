# Checking correctness of code: Debugging

{{< include ../includes/_wip.qmd >}}

```{r setup}
#| include: false
```

**Introduction**

Debugging is one of activities that seems really scary and difficult,
but once you try it and use it, is not nearly as intimidating as it
seemed. In this session we will focus on using RStudio's interactive
debugger to debug code.

**Session objectives**:

-   Understand what debugging is.
-   Identify how the debugger tool is started in RStudio, what it looks
    like and apply it to debug functions that cause issues.
-   Understand `traceback()` error messages to identify which function
    is causing an error.
-   Apply `stop()` statements to your functions to protect users from
    unexpected behavior.

## What is debugging?

Debugging is the process of analyzing a section of code in order to
identify and fix problems related to that code. In addition to looking
at the code itself, debugging often involves analyzing the input and
output of that code, since unexpected behavior can be caused by
unexpected input data.

Even without using dedicated debugging tools, you have probably done a
lot of debugging already. You may have had a line of code that produced
an error or gave an unexpected output, which you managed to fix using
trial and error and manually inputting different values and inspecting
the output. There is nothing wrong with this approach, but if you build
your data analysis workflow around custom functions, the debugging
process can be made a lot more efficient by using dedicated tools, such
as RStudio's debugger and `traceback()`.

If you've ever gotten an error in RStudio, you've probably been just a
single click away from starting the debugger or calling `traceback()`.
After this session, you will be able to use both:

![Placeholder image from
adv-R](https://d33wubrfki0l68.cloudfront.net/725810117d43af1ab9b5455766afdd255d551304/4b747/screenshots/debugging/rstudio-error.png)

## Debugging with the RStudio debugger

The RStudio debugger allows you to pause the execution of a function and
advance step-by-step through the function while it is executing. In the
debugger, you can inspect and modify objects inside the function
environment at each step. This is great for understanding why an error
or unexpected output occurs.

### How to start the debugger

-   There are many different ways to start the debugger in R:
    -   "Rerun with Debug"
    -   Insert `browser()` statement inside functions
    -   Wrapping a function call inside a `debug()` inserts a
        `browser()` statement at the top line inside the function. This
        can be removed by wrapping the same function inside `undebug()`
        (using `debugonce()` is usually more convenient as it removes
        the browser statement automatically)
    -   `options(error = browser)`

### What the debugger looks like

```{=html}
<!--#TODO:
Insert screenshot/video and go over buttons & hotkeys
-->
```
**Describe the debugger environment:**

-   What's different from the normal environment

-   How to use the new functionalities to step through a function,
    change variable values and inspect output.

-   Using 'step into current function call' in a more complicated
    function.

-   How to exit the debugger: 'Q'

-   A yellow line will highlight the code in the function, along with a
    green arrow on the left of the line number.

-   The Console will now start with `Browse[1]>` and will have text like
    `debug at ...`.

-   There will be new buttons on the top of the Console like "Next",
    "Continue", and "Stop".

-   The Environment pane will be empty and will say "Traceback".

### Using the debugger

```{=html}
<!--#TODO:
Maybe add a more complex example with a less informative error message, similar to the long call stack example from adv-R
-->
```
We might have a function like this, which returns the double of the
input minus the squareroot of the input:

```{r, eval=FALSE}
my_function <- function(number) {
  double_of_number <- number + number
  number_squareroot <- sqrt(number)
  return(double_of_number - number_squareroot)
}
```

When you use this function, it usually works without a problem, but some
times it returns `NaN` with a warning. Since this is a small toy
function with a helpful warning message, you may be able to spot the
location of the issue right away, but you may not always be so lucky.
The debugger can always help you, so let's use it to find out where the
problem arises in the function!

Let's start the debugger by inserting a `browser()` statement inside the
function:

```{r, eval=FALSE}
test_debugging <- function(number) {
  browser()
  double_of_number <- number + number
  number_squareroot <- sqrt(number)
  return(double_of_number - number_squareroot)
}
```

And re-run and use the function again, which will start up the debugger
whenever the function is called. Now we can inspect the number variable
in the function environment, and we can change it and see what happens
to the output. It quickly becomes clear which part of the code is
causing the `NA` outputs and why it is causing them.

## Using stop()

By default, R is quite forgiving about accepting inputs, even those that
might not be the intended type. Even when it might not make much sense,
R will try its best to use the inputs and run the function you ask it
to.

In the above example, we got a warning with an informative message
related to the `NAs` produced by the `sqroot()` function, but sometimes
it might be best to return an error and stop the code from executing, or
to add a specific error message. The `stop()` function allows you to do
just that, and helps the user start the debugger in the area of the code
and environment that caused the error. This can be very helpful to
"future you" or other users, so consider where a `stop()` call can
protect users from unexpected behavior when your are making custom
functions.

```{r, eval=FALSE}
test_debugging <- function(number) {
  double_of_number <- number + number
    if(number < 0) {
    stop("Input number is negative, can't compute square root")
  }
  number_squareroot <- sqrt(number)
  
  return(double_of_number - number_squareroot)
}
```

#### Exercise ideas

-   Start the debugger without using the browser function
-   A more complex debugging case (a la "palindrome" function example)
-   Add stop() to make debugging easier.

```{=html}
<!--#TODO:
Exercise idea: start the debugger without using the browser() function
E.g.
debugonce(my_function)
my_function(2)
}
-->
```
<!-- TODO: Image of debugging changes, with descriptions -->

**From RSE**:

-   Debugging your functions
    -   Text: Tracking down problems. Give code example with unexpected
        output. How do we figure out what the problem is?
    -   Code: Motivation? Maybe, something like:
        `> book_meta(c("Title: Dracula", "Author: Bram Stoker"))         # A tibble: 0 x 3         # â€¦ with 3 variables: author <chr>, title <chr>, release <chr>`
        Why don't we get a one row tibble back?
    -   Text: Print debugging. An easy way to start, but like a
        postmortem, can't step in and try to solve problem.
    -   Code: `print()`, `cat()`, `str()`
    -   Text: Diving inside your functions. Sometimes you want to try
        things inside your function. The interactive debugger puts you
        inside the function environment.
    -   Code: Adding Editor breakpoints
    -   Text: Navigating the interactive debugger, focus on Environment
        and Console, execute next statement, stop.
    -   Text: Other ways to enter the interactive debugger? e.g.
        `debug()`, `browser()`
    -   Exercise: Back to motivation, can you narrow down the problem
        and suggest a solution?
    -   Text: One solution,
        `extract_element("Author: Bram Stoker", "Title")`, would be more
        useful if returned `NA`. Use tests to describe bugs - test fails
        now, but you'll know you've fixed the bug once test passes.
    -   Code: Add tests that fail.
    -   Exercise: Fix the failing tests, and confirm all tests pass.

::: callout-note
## Reading task: \~4 minutes

TODO: Reading text
:::

## Exercise: TODO: Add title

> Time: \## minutes.

```{r solution-LABEL}
#| eval: false
#| code-fold: true
#| code-summary: "**Click for the solution**. Only click if you are struggling or are out of time."
```

## Alternatives to the debugger

Other debugging methods include adding 'breakpoints' or `print()`
statements to your code, which allow you to stop the code execution or
print values at specific points during the code execution. Although
these tools don't allow you to interact with the code to the same extent
as the debugger, they can be useful. They're described in the links
provided in the *Resources for further reading* below.

## Summary

-   TODO: List of summary items

## Resource for further reading

[Advanced R, Chapter 22:
Debugging](https://adv-r.hadley.nz/debugging.html)

[Video: Introduction to debugging in
RStudio](https://vimeo.com/99375765)

[What They Forgot to Teach You About R, Chapter 13: Debugging
R](https://rstats.wtf/debugging-r)

[RStudio debugging
documentation](https://support.posit.co/hc/en-us/articles/205612627-Debugging-with-the-RStudio-IDE)
