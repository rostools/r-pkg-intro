# Automatically test your package {#sec-automated-testing}

{{< include ../includes/_wip.qmd >}}

```{r setup}
#| include: false
```

<!-- TODO: Add an introduction here -->

## Learning objectives

The overall **learning outcome** for this session is to:

-   Explain the meaning of continuous integration and *automated
    testing* in the context of developing R packages and set up the
    automation infrastructure.

Specific **objectives** are to:

-   Describe the meaning of continuous integration (CI), how automated
    testing connects to it, and both of their roles in effective
    development of R packages.
-   Explain how GitHub Actions are a form of CI and how they they fit
    within the R package development workflow.
-   Set up a file by using the `{usethis}` package that tells GitHub
    Actions to automatically test and run checks on your package
    whenever you push code to GitHub.
-   Navigate the logs of the GitHub Actions to assess errors, warnings,
    and other messages that may arise during the automated testing
    process.

TODO: Include section on test coverage?

## TODO: Section

-   Continuous Integration and GitHub Actions

    -   Text: Explain what is continuous integration
    -   Text: Explain GitHub Actions
        (https://github.com/features/actions)\[https://github.com/features/actions\]
    -   Exercise: Deploy a sample GitHub Actions
        -   Probably one that install R using the r-lib action is a good
            exercise
    -   Code: `usethis::use_github_action_check_standard()`
    -   Text: Explain how to navigate the result of the GitHub Action
        and the logs window

::: callout-note
## Reading task: \~4 minutes

TODO: Reading text
:::

## Exercise: TODO: Add title

> Time: \## minutes.

```{r solution-LABEL}
#| eval: false
#| code-fold: true
#| code-summary: "**Click for the solution**. Only click if you are struggling or are out of time."
```

## Summary

-   TODO: List of summary items
