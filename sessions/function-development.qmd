# Function development in a package environment {#sec-function-dev}

{{< include ../includes/_wip.qmd >}}

```{r setup}
#| include: false
```

<!-- TODO: Add an introduction here -->

So far, our zipfs package contains some data and a very simple function.
We've seen the general workflow for adding a function to a package, but
we skimmed over lots of the details. In this chapter, we'll take a much
closer look at writing functions, the details of including them in a
package, documenting them, and how to stop your functions with an error.

-   Process of creating non-function code, checking that it works, then
    converting it into a function
-   There are several workflows for this (create in vignette Rmd, make a
    dev/creating.R script as a development location, developing in the
    examples Roxygen section, 'Untitled1.R'). Which to use?
-   Mostly *how workflow actually looks like*.
-   Building functions up slowly, making small targeted functions that
    build up into a bigger more complex functions
-   Process control (if, stop)
-   Dependency management (better term? e.g. using `@importFrom` vs
    `::`)
-   To use `@examples` to help with creating function?
-   Function documentation (with roxygen2), part 1?

## Learning objectives

The overall **learning outcome** for this session is:

1.  Review the core workflow in creating functions and describe
    additional workflows and software development principles required to
    formally (and effectively) develop functions within an R package.

Specific **objectives** are:

-   Review and apply the workflow for converting code into a function.
-   Identify approaches and "code patterns" for writing your functions
    that ensure they are internally self-contained and reusable.
-   Explain what package dependency means in the context of packages and
    how you formally manage dependencies when writing functions as part
    of a package.
-   Use control flow processes like `if () {} else() {}` to modify what
    a function does based on a condition.

## TODO: Section

Writing a function should start with working code. That is, rather than
starting with a blank function template for `book_meta()` and trying to
fill it in. First, we should write code that extracts the relevant
details in a concrete example, and then turn it into a function. We are
going to start with this working code that extracts these details from
the `dracula` object:

```{r cs-extract-meta, eval = FALSE}
library(stringr)
library(tibble)

devtools::load_all() # Replace with `library(zipfs)` if we've installed by now
text <- dracula[8:14]

author_line <- str_subset(text, "Author: ")
author <- str_remove(author_line, "Author: ")

title_line <- str_subset(text, "Title: ")
title <- str_remove(title_line, "Title: ")

release_date_line <- str_subset(text, "Release Date: ")
release_date <- str_remove(release_date_line, "Release Date: ")

tibble(
  author = author,
  title = title,
  release_date = release_date
)
```

We are presenting this code fully formed, but usually getting to this
point is the hardest part of writing a function. We certainly didn't
write it out in one go. We started with a little example `text` then
wrote a little code, tested it out, fixed any problems and iterated.

But, where did we write this code? If we weren't working on a package,
we'd think nothing of opening up a new R script file, or Quarto file,
and putting our code inside, and saving it any old place. But, when we
are working on a package, we need to be more careful about adding files
that aren't directly related to the package. We wouldn't want someone
who wants to use our package also getting all code files that were
notes, or experiments, and in fact, there are rules about what files and
folders **can't** be in a package directory. One option would be to open
an R script and use it as a temporary code writing area, and never save
it - the `Untitled.R` strategy. This is fine for quick experiments, but
is a little dangerous for anything you might write over more than one
session. A better option is to create a specific location for code that
isn't part of the package, and make sure it is ignored when the package
is built. There is a `usethis` function `use_directory()` that helps set
this up. Let's create a `dev/` directory in our package project:

```{r cs-setup-dev-dir, eval = FALSE}
use_directory("dev", ignore = TRUE)
```

```         
✓ Creating 'dev/'
✓ Adding '^dev$' to '.Rbuildignore'
```

The argument `ignore = TRUE` adds this folder to `.Rbuildignore` - a
file that lists things that shouldn't be included in the package when it
is built.

Now we can take the chunk above and save it in `dev/creating.R`, and be
sure it won't end up in the final built package. Let's work through the
code in that is in this chunk:

1.  Some packages are loaded - stringr is needed for the string
    operations and tibble for putting the results together.
2.  A variable `text` is created to hold a little bit of the `dracula`
    text as a concrete example of book text.
3.  The author is extracted from `text` into `author` by first pulling
    out the line that contains the pattern `"Author: "`, then removing
    the pattern `"Author: "` from that line.
4.  Repeat 3. but now with the pattern `"Title:  "` to extract the
    title.
5.  Repeat 3. but now with the pattern `"Release Date:  "` to extract
    the release date.
6.  Combine `author`, `title`, and `release_date` in a one row tibble.

If we run the entire script we should end with the output:

```         
# A tibble: 1 × 3
  author      title   release_date                
  <chr>       <chr>   <chr>                       
1 Bram Stoker Dracula August 16, 2013 [EBook #345]
```

-   Review how to turn code into a function: pick a name, identify
    arguments, fill in the function constructor. Brief review of how we
    build functions in Intermediate, except add the additional thing of
    developing in `dev/` first.

-   Explicit vs implicit returns?

-   Text: Functions live in `.R` files in `R/`. How should functions be
    organized into files?

<!-- TODO: Create diagram of workflow. -->

-   Workflow: develop and test code, convert to function, move function
    to R/, run load_all(), test code in dev/.

## Dependencies: Using Functions From Other Packages

-   Text: We have a problem. On clean session, `load_all()`,
    `book_meta(dracula)`, produces an error, can't find `tibble()`.
    Difference between interactive work (`library(tibble)`) and package
    development (don't want to load entire libraries in user's
    workspaces)

```{r ce-dep-error, error = TRUE}
# Restart R, clean slate
load_all()
book_meta(dracula)
```

-   Text: Two changes needed: specify our package relies on another,
    inside functions, be specific about where functions inside our own
    code come from.

-   Text: Specify our function relies on another package,

```{r ce-use-package}
use_package("tibble")
```

-   Text: What changes? Adds line to Imports in DESCRIPTION, ensures
    when someone installs our package, they get tibble too if they don't
    have it.

Output includes:

```         
• Refer to functions with `tibble::fun()`
```

Text: Also need to be explicit when we use tibble functions that these
come from the tibble package, use `tibble::` in front

`book_meta()` becomes:

```{cs-book-meta-tibble}
book_meta <- function(text){
  tibble::tibble(
    author = extract_element(text, "Author: "), 
    title =  extract_element(text, "Title: "),
    release_date = extract_element(text, "Release Date: ")
  )
}
```

Text: Try again, restart R,

```{r ce-dep-error-2}
# Restart R, clean slate
load_all()
book_meta(dracula)
```

Text: Still have an error, but now it's related to functions we use
inside `extract_element()`.

### Exercise: Fix dependency problems in `extract_element()`

Reminder of steps:

-   Add the stringr package as a dependency with
    `usethis::use_package()`
-   Anywhere a stringr function is used preface with `stringr::`

You'll know it's worked if this code works without error in a fresh
session of R.

```{r es-extract-element-dep}
# Restart R, clean slate
load_all()
book_meta(dracula)
```

```{r sol-extract-element-dep}
# + change to DESCRIPTION
extract_element <- function(text, element) {
  line <- stringr::str_subset(text, element)
  value <- stringr::str_remove(line, element)
  value
}
```

::: callout-note
## Reading task: \~4 minutes

TODO: Reading text
:::

## Exercise: TODO: Add title

> Time: \## minutes.

```{r solution-LABEL}
#| eval: false
#| code-fold: true
#| code-summary: "**Click for the solution**. Only click if you are struggling or are out of time."
```

## Summary

-   TODO: List of summary items
